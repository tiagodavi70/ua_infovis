<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
	<script src="https://d3js.org/d3.v6.min.js"></script>
    
    <script type="text/javascript">
    
    let width = 350,
        height = 300,
        margin = 50;
    
    // save state of visual variables to brush and filter
    let svgMap, mapPaths;
    let barsRect, barScales;
    let scatterCircles, scatterScales;
    let raw_geo_data;

    function drawMap(svgMap, geo_data) {

        let projection = d3.geoMercator()
                .scale(360*width*10)
                .center([-8.643, 40.63]); // center of projection

        let path = d3.geoPath().projection(projection);

        mapPaths = svgMap.selectAll("path")
            .data(geo_data.features) // draw feature by feature, do not load all feature collection
            .join("path")
                .attr("d", d => path(d)) // draw feature by feature
                .attr("fill", "teal")
                .attr("stroke", "black")
                .attr("stroke-width", 1)
                .on("click", function(e, d) {
                    handleSelection(d.properties.name); // delegate event
                });
    }

    function drawBars(svgBars, scales, data) {
        let xBars = scales.x;
        let yBars = scales.y;

        barsRect = svgBars.selectAll("rect")
            .data(data)
            .join("rect")
                .attr("x",d => xBars(d.name))
                .attr("y", d => height - yBars(d.staff))
                .attr("width", (width/2 - margin)/data.length)
                .attr("height", d => yBars(d.staff))
                .style("fill","teal")
                .style("stroke","black")
                .on("click", function(e, d) { 
                    handleSelection(d.name); // delegate event
                });
    }

    function drawScatter(svgScatterplot, scales, data) {
        let xScatter = scales.x;
        let yScatter = scales.y;

        scatterCircles = svgScatterplot.selectAll("circle")
            .data(data)
            .join("circle")
                .attr("cx",d => xScatter(d.undergrad))
                .attr("cy", d => yScatter(d.postgrad))
                .attr("r", width/20)
                .style("fill","teal")
                .style("stroke","black")
                .on("click", function(e, d) {          
                    handleSelection(d.name); // delegate event
                });
    }

    function handleSelection(key) {
        
        // reset visual display
        mapPaths.style("fill","teal");
        scatterCircles.style("fill","teal");           
        barsRect.style("fill","teal");

        // using filter it is possible to get the selection by the key
        mapPaths.filter(d => d.properties.name === key).style("fill","red");
        scatterCircles.filter(d => d.name === key).style("fill","red");
        barsRect.filter(d => d.name === key).style("fill","red");
    }


    function setupVis(data) {

        // -----------------
        // bars setup
        let svgBars = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);
        let xBars = d3.scaleBand()
            .rangeRound([margin, width-margin])
            .domain(data.map(d => d.name));
        let yBars = d3.scaleLinear()
            .range([height - margin, margin])
            .domain([d3.max(data, d=>d.staff),0]);
        barScales = {"x":xBars, "y":yBars};


        // -----------------
        // scatterplot setup
        let svgScatterplot = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);
        let xScatter = d3.scaleLinear()
            .rangeRound([margin, width-margin])
            .domain([0,d3.max(data, d=>d.undergrad)]);
        let yScatter = d3.scaleLinear()
            .range([height - margin, margin])
            .domain([d3.max(data, d=>d.postgrad),0]);
        scatterScales = {"x":xScatter, "y": yScatter}
        
        console.log(data)
        drawBars(svgBars, barScales, data);
        drawScatter(svgScatterplot, scatterScales, data);

        // ---------------
        // added for filtering
        raw_data = data; 
        let slider = d3.select("#filter_slider");
        let label = d3.select("#label");

        let min = 0, 
            max = d3.max(raw_data,d => d.events) + 10;
        slider
            .attr("min", min)
            .attr("max", max)
            .attr("value", 1)
            .attr("step", 1)
            .on("input", function(e, d) {
                label.text(this.value); // use `this` on the place of slider 
                let dataFiltered = data.filter(d => d.events > this.value); // filter using value
                drawBars(svgBars, barScales, dataFiltered);
                drawScatter(svgScatterplot, scatterScales, dataFiltered);
                
                // get names from filtered data and update features
                let keys = dataFiltered.map(d => d.name);
                let geo_data_filtered = JSON.parse(JSON.stringify(raw_geo_data)); // deep copy of object
                geo_data_filtered.features = raw_geo_data.features.filter(d => {
                    return keys.includes(d.properties.name); // filter by names
                })
                drawMap(svgMap, geo_data_filtered);
                handleSelection({})
            });
    }
    </script>
</head>
<body>

    <div id="filter_container">
        <label>Events: <input type="range" id="filter_slider"/> </label>
        <p id="label"> </p>
    </div>

    <script type="text/javascript">
        // load and draw map
        d3.json("map.json")
            .then(data => {
                raw_geo_data = data;

                // create svg for map
                svgMap = d3.select("body").append("svg")
                            .attr("width", width)
                            .attr("height", height);

                drawMap(svgMap, data)
            })
            .catch(err => {console.log(err)})
        
        // load and draw all vis
        d3.json("random_stuff.json")
            .then(setupVis)
            .catch(err => {console.log(err)})
    </script>    
</body>
</html>

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
	<script src="https://d3js.org/d3.v6.min.js"></script>
    <!-- <script src="https://bundle.run/geojson-rewind@0.3.1"></script> -->
    <script type="text/javascript">
    
    let width = 350,
        height = 300,
        margin = 50;
    
    // save state of visual marks to brush and filter
    let mapPaths;
    let barsRect, barScales;
    let scatterCircles, scatterScales;

    function drawMap(geo_data) {
        // console.log(JSON.stringify(geojsonRewind(geo_data, true)))

        // create svgs for map
        let svgMap = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

        let projection = d3.geoMercator()
                .scale(360*width*10)
                .center([-8.645, 40.63]); // aprox. center of projection

        let path = d3.geoPath().projection(projection);
        
        mapPaths = svgMap.selectAll("path")
            .data(geo_data.features) // draw feature by feature, do not load all feature collection
            .join("path")
                .attr("d", d => path(d)) // draw feature by feature
                .style("fill", "teal")
                .style("stroke", "black")
                .style("stroke-width", 1)
                .on("click", function(e,d) {
                    mapPaths.style("fill","teal");
                    d3.select(e.currentTarget).style("fill","red");
                });
    }

    function drawBars(svgBars, scales, data) {
        let xBars = scales.x;
        let yBars = scales.y;

        barsRect = svgBars.selectAll("rect")
            .data(data)
            .join("rect")
                .attr("x",d => xBars(d.name))
                .attr("y", d => height - yBars(d.staff))
                .attr("width", (width/2 - margin)/data.length)
                .attr("height", d => yBars(d.staff))
                .style("fill","teal")
                .style("stroke","black")
                .on("click", function(e,d) { // selection bars
                    barsRect.style("fill","teal");
                    d3.select(e.currentTarget).style("fill","red");
                });
    }

    function drawScatter(svgScatterplot, scales, data) {
        let xScatter = scales.x;
        let yScatter = scales.y;

        scatterCircles = svgScatterplot.selectAll("circle")
            .data(data)
            .join("circle")
                .attr("cx",d => xScatter(d.undergrad))
                .attr("cy", d => yScatter(d.postgrad))
                .attr("r", width/20)
                .style("fill","teal")
                .style("stroke","black")
                .on("click", function(e,d) { // selection scatter
                    scatterCircles.style("fill","teal");
                    d3.select(e.currentTarget).style("fill","red");  
                });
    }

    function setupVis(data) {

        // -----------------
        // bars setup
        let svgBars = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);
        let xBars = d3.scaleBand()
            .rangeRound([margin, width-margin])
            .domain(data.map(d => d.name));
        let yBars = d3.scaleLinear()
            .range([height - margin, margin])
            .domain([d3.max(data, d=>d.staff),0]);
        barScales = {"x":xBars, "y":yBars};

        // -----------------
        // scatterplot setup
        let svgScatterplot = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);
        let xScatter = d3.scaleLinear()
            .rangeRound([margin, width-margin])
            .domain([0,d3.max(data, d=>d.undergrad)]);
        let yScatter = d3.scaleLinear()
            .range([height - margin, margin])
            .domain([d3.max(data, d => d.postgrad),0]);
        scatterScales = {"x":xScatter, "y": yScatter}
        
        drawBars(svgBars, barScales, data);
        drawScatter(svgScatterplot, scatterScales, data);
    }
    </script>
</head>
<body>
    <script type="text/javascript">
        // load and draw map
        d3.json("map.json")
            .then(drawMap)
            .catch(err => {console.log(err)})
        
        // load and draw all vis
        d3.json("random_stuff.json")
            .then(setupVis)
            .catch(err => {console.log(err)})
    </script>    
</body>
</html>
